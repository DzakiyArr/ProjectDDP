#include <curses.h>
#include <fstream>
#include <string>
#include <windows.h>

using namespace std;

void settings_menu(), loading(), Menuakun();
void buatAkun();
bool login();
void Menuakun() {
    const int jumlahOpsi = 2;
    const char* opsi[jumlahOpsi] = {"Buat akun", "Login"};
    int pilihanTerpilih = 0;
    int pilihan = -1;

    while (pilihan == -1) {
        clear();
        mvprintw(0, 0, "Main Menu");
        for (int i = 0; i < jumlahOpsi; i++) {
            if (i == pilihanTerpilih)
                attron(A_REVERSE);
            mvprintw(i + 1, 2, opsi[i]);
            attroff(A_REVERSE);
        }
        int tombol = getch();
        switch (tombol) {
            case KEY_UP:
                if (pilihanTerpilih == 0)
                    pilihanTerpilih = jumlahOpsi - 1;
                else
                    --pilihanTerpilih;
                break;
            case KEY_DOWN:
                if (pilihanTerpilih == jumlahOpsi - 1)
                    pilihanTerpilih = 0;
                else
                    pilihanTerpilih++;
                break;
            case 10:
                pilihan = pilihanTerpilih;
                break;
        }

        switch (pilihan) {
            case 0: 
                buatAkun();
                break;
            case 1:
                if (login()) {
                    clear();
                    mvprintw(0, 0, "Login berhasil! Pilih menu berikut:");
                    refresh();
                    getch();
                    return; // Exit to main menu after successful login
                }
                break;
        }
    }
}

void buatAkun() {
    string username, password;

    clear();
    printw("Masukkan nama pengguna: ");
    refresh();
    char tempnama[100];
    echo();
    getstr(tempnama);
    username = tempnama;

    printw("Masukkan kata sandi: ");
    refresh();
    char temppass[100];
    echo();
    getstr(temppass);
    password = temppass;

    ofstream file("akun.txt", ios::app);
    if (file.is_open()) {
        file << username << "," << password << endl;
        file.close();
        printw("\nAkun berhasil dibuat!\n");
        refresh();
    } else {
        printw("\nTerjadi kesalahan dalam menyimpan akun!\n");
        refresh();
    }
    getch();
}

bool login() {
    string username, password, line;
    bool loginBerhasil = false;

    clear();
    printw("Masukkan nama pengguna: ");
    refresh();
    char tempnama[100];
    echo();
    getstr(tempnama);
    username = tempnama;

    printw("Masukkan kata sandi: ");
    refresh();
    char temppass[100];
    echo();
    getstr(temppass);
    password = temppass;

    ifstream file("akun.txt");
    if (file.is_open()) {
        while (getline(file, line)) {
            size_t pos = line.find(',');
            string storedUsername = line.substr(0, pos);
            string storedPassword = line.substr(pos + 1);

            if (username == storedUsername && password == storedPassword) {
                loginBerhasil = true;
                break;
            }
        }
        file.close();

        if (loginBerhasil) {
            printw("\nLogin berhasil! Selamat datang %s\n", username.c_str());
            refresh();
        } else {
            printw("\nUsername atau kata sandi salah!\n");
            refresh();
        }
    } else {
        printw("\nTerjadi kesalahan dalam membuka file!\n");
        refresh();
    }
    getch();
    return loginBerhasil;
}

void settings_menu() {
    const char *opsiSettings[] = {
        "Difficulty: Easy",
        "Volume: 50%",
        "Fullscreen: OFF",
        "Back"
    };
    int jumlahOpsi = sizeof(opsiSettings) / sizeof(char *);
    int pilihanTerpilih = 0;
    int pilihan = -1;

    while (1) {
        clear();
        mvprintw(0, 0, "Settings Menu");
        for (int i = 0; i < jumlahOpsi; i++) {
            if (i == pilihanTerpilih)
                attron(A_REVERSE);
            mvprintw(i + 1, 2, opsiSettings[i]);
            attroff(A_REVERSE);
        }
        int tombol = getch();
        switch (tombol) {
            case KEY_UP:
                if (pilihanTerpilih == 0)
                    pilihanTerpilih = jumlahOpsi - 1;
                else
                    --pilihanTerpilih;
                break;
            case KEY_DOWN:
                if (pilihanTerpilih == jumlahOpsi - 1)
                    pilihanTerpilih = 0;
                else
                    ++pilihanTerpilih;
                break;
            case 10:
                pilihan = pilihanTerpilih;
                break;
        }

        if (pilihan != -1) {
            if (pilihan == 0) { // Difficulty
                mvprintw(6, 0, "Pilih Kesulitan (Easy/Medium/Hard):");
                getch();
            } else if (pilihan == 1) { // Volume
                mvprintw(6, 0, "Sesuaikan Volume (0-100):");
                getch();
            } else if (pilihan == 2) { // Fullscreen
                mvprintw(6, 0, "Alihkan Layar Penuh (ON/OFF):");
                getch();
            } else if (pilihan == 3) { // Back
                break;
            }
            mvprintw(8, 0, "Tekan tombol apa saja untuk kembali ke pengaturan...");
            getch();
            pilihan = -1; 
        }
    }
}
void loading() {
    clear();
    for (int i = 0; i < 3; i++) {
        start_color();
        init_pair(2, COLOR_BLUE, COLOR_BLACK);
        attron(COLOR_PAIR(2));
        mvprintw(5, 10,"- > - > - > - > - > - > - > - > - > - > - > - > - > - >");
        mvprintw(6, 10,"< - < - < - < - < - < - < - < - < - < - < - < - < - < -");
        mvprintw(7, 10,"      _      ____          _____ _____ _   _  _____     ");
        mvprintw(8, 10,"     | |    / __ \\   /\\   |  __ \\_   _| \\ | |/ ____|    ");
        mvprintw(9, 10,"     | |   | |  | | /  \\  | |  | || | |  \\| | |  __     ");
        mvprintw(10, 11,"    | |   | |  | |/ /\\ \\ | |  | || | | . ' | | |_ |    ");
        mvprintw(11, 11,"    | |___| |__| / ____ \\| |__| || |_| |\\  | |__| |    ");
        mvprintw(12, 11,"    |______\\____/_/    \\_\\_____/_____|_| \\_|\\_____|    ");
        mvprintw(13, 10,"- > - > - > - > - > - > - > - > - > - > - > - > - > - >");
        mvprintw(14, 10,"< - < - < - < - < - < - < - < - < - < - < - < - < - < -");
        attroff(COLOR_PAIR(2));
        mvprintw(15, 10, "|             

        for(int f = 1;f<54; f++){
            start_color();
            init_pair(1, COLOR_BLUE, COLOR_BLUE);
            attron(COLOR_PAIR(1));
            mvprintw(15, 10 + f, ">");
            refresh();
            Sleep(200);
            attroff(COLOR_PAIR(1));
    }
        clear();
    }
}

int main() {
    initscr();
    raw();
    keypad(stdscr, TRUE);
    echo();
    Menuakun();
    int pilihan = -1;
    const char *opsi[] = {"Start Game", "Settings", "Scores", "Quit"};
    int jumlahOpsi = sizeof(opsi) / sizeof(char *);
    int pilihanTerpilih = 0;

    while (pilihan == -1) {
        clear();
        mvprintw(0, 0, "Main Menu");
        for (int i = 0; i < jumlahOpsi; i++) {
            if (i == pilihanTerpilih)
                attron(A_REVERSE);
            mvprintw(i + 1, 2, opsi[i]);
            attroff(A_REVERSE);
        }
        int tombol = getch();
        switch (tombol) {
            case KEY_UP:
                if (pilihanTerpilih == 0)
                    pilihanTerpilih = jumlahOpsi - 1;
                else
                    --pilihanTerpilih;
                break;
            case KEY_DOWN:
                if (pilihanTerpilih == jumlahOpsi - 1)
                    pilihanTerpilih = 0;
                else
                    ++pilihanTerpilih;
                break;
            case 10: 
                pilihan = pilihanTerpilih;
                break;
        }

        switch (pilihan) {
            case 0: 
                loading();
                break;
            case 1: 
                settings_menu();
                break;
            case 2: // Scores
                printw("\nScores feature is not available yet.\n");
                refresh();
                break;
            case 3: // Quit
                printw("Terima kasih! Sampai jumpa!\n");
                refresh();
                break;
        }
    }

    endwin();
    return 0;
}
            
